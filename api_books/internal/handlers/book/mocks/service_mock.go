// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mock_book is a generated GoMock package.
package mock_book

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/reversersed/go-web-services/tree/main/api_books/internal/client"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddBook mocks base method.
func (m *MockService) AddBook(ctx context.Context, query *client.InsertBookQuery) (*client.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBook", ctx, query)
	ret0, _ := ret[0].(*client.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBook indicates an expected call of AddBook.
func (mr *MockServiceMockRecorder) AddBook(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBook", reflect.TypeOf((*MockService)(nil).AddBook), ctx, query)
}

// FindBooks mocks base method.
func (m *MockService) FindBooks(ctx context.Context, filters map[string]string, offset, limit int) ([]*client.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBooks", ctx, filters, offset, limit)
	ret0, _ := ret[0].([]*client.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBooks indicates an expected call of FindBooks.
func (mr *MockServiceMockRecorder) FindBooks(ctx, filters, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBooks", reflect.TypeOf((*MockService)(nil).FindBooks), ctx, filters, offset, limit)
}

// IsBookExists mocks base method.
func (m *MockService) IsBookExists(ctx context.Context, name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBookExists", ctx, name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBookExists indicates an expected call of IsBookExists.
func (mr *MockServiceMockRecorder) IsBookExists(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBookExists", reflect.TypeOf((*MockService)(nil).IsBookExists), ctx, name)
}
