{
    "consumes": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "title": "API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:9000",
    "basePath": "/api/v1/",
    "paths": {
        "/books": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "books"
                ],
                "summary": "Creates a new book",
                "parameters": [
                    {
                        "type": "string",
                        "description": "primitive object id to author of book",
                        "name": "authorid",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "binary",
                        "description": "Must be an image file to book cover",
                        "name": "cover",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "binary",
                        "description": "Must be a .pdf file to book",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Array of genre's Id's (must be primitive object id)",
                        "name": "genres",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 32,
                        "minLength": 4,
                        "type": "string",
                        "description": "Book's name. Must be unique",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maximum": 5000,
                        "type": "integer",
                        "description": "Total number of pages in pdf file",
                        "name": "pages",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maximum": 2100,
                        "minimum": 1400,
                        "type": "integer",
                        "name": "year",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful response. Added book",
                        "schema": {
                            "$ref": "#/definitions/book.Book"
                        }
                    },
                    "400": {
                        "description": "Return's if some fields was missing",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "401": {
                        "description": "Return's if service can't authorize user or user's rights",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "500": {
                        "description": "Returns when there's some internal error that needs to be fixed or smtp server is not responding",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "501": {
                        "description": "Returns if query was incorrect",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get user using Id or login, both params are optional, but one of them is necessary",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Finds user by id or login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User login",
                        "name": "login",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Returns when service didn't get a parameters",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "404": {
                        "description": "Returns when service can't find user by provided credentials (user not found)",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "500": {
                        "description": "Returns when there's some internal error that needs to be fixed",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    }
                }
            }
        },
        "/users/changename": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "New login must be unique. Login changing are available only 1 time per month",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user's login",
                "parameters": [
                    {
                        "description": "New user login. Must be unique",
                        "name": "NewLogin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UpdateUserLoginQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response. User's login was updated",
                        "schema": {
                            "$ref": "#/definitions/user.JwtResponse"
                        }
                    },
                    "401": {
                        "description": "Return's if service can't authorize user",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "403": {
                        "description": "Return's if user has login changing cooldown",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "404": {
                        "description": "Return's if user is not authorized",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "409": {
                        "description": "Return's if new user's login already taken",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "500": {
                        "description": "Returns when there's some internal error that needs to be fixed or smtp server is not responding",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "501": {
                        "description": "Returns if query was incorrect",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    }
                }
            }
        },
        "/users/delete": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Only user can delete his own account. To delete user he needs to confirm his password",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Deletes user's account",
                "parameters": [
                    {
                        "description": "User password",
                        "name": "Password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.DeleteUserQuery"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful response. User was deleted, need to remove his session"
                    },
                    "400": {
                        "description": "Return's if user typed incorrect password",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "401": {
                        "description": "Return's if service can't authorize user",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "404": {
                        "description": "Return's if user is not authorized",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "500": {
                        "description": "Returns when there's some internal error that needs to be fixed or smtp server is not responding",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "501": {
                        "description": "Returns if query was incorrect",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    }
                }
            }
        },
        "/users/email": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "If code field is empty: send or resend confirmation message to user's email\nMessage can be resended every 1 minutes\nIf code field is not empty: validate code and approve email, code is expired within 10 minutes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Confirm user's email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Confirmation code",
                        "name": "code",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response. Confirmation code was sent"
                    },
                    "204": {
                        "description": "Successful response. Email was confirmed"
                    },
                    "400": {
                        "description": "Return's if user's email already confirmed",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "401": {
                        "description": "Return's if service can't authorize user",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "403": {
                        "description": "Return's if email can't be resend now (cooldown still active)",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "404": {
                        "description": "Return's if service can't find user's code or code is expired",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "500": {
                        "description": "Returns when there's some internal error that needs to be fixed or smtp server is not responding",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Finds user by login and password\nSets token to cookies\nLogin field can be provided with user login or email",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Authenticates user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UserAuthQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response. Returns user's login, roles and personal token and refresh token. Refresh token stores in cache",
                        "schema": {
                            "$ref": "#/definitions/user.JwtResponse"
                        }
                    },
                    "404": {
                        "description": "Returns when service can't find user by provided credentials (user not found)",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "500": {
                        "description": "Returns when there's some internal error that needs to be fixed",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "501": {
                        "description": "Returns when provided data was not validated",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "description": "Creates a new instance of user and returns authorization principals. Sets the token cookies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UserRegisterQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful token response. Returns the same response as in authorization",
                        "schema": {
                            "$ref": "#/definitions/user.JwtResponse"
                        }
                    },
                    "409": {
                        "description": "Returns when there's already exist user with provided login",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "500": {
                        "description": "Returns when there's some internal error that needs to be fixed",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "501": {
                        "description": "Returns when provided data was not validated",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "author.Author": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "book.Book": {
            "type": "object",
            "properties": {
                "author": {
                    "$ref": "#/definitions/author.Author"
                },
                "cover": {
                    "description": "Name of cover file",
                    "type": "string"
                },
                "file": {
                    "description": "Name of book file",
                    "type": "string"
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genre.Genre"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pages": {
                    "type": "integer"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "errormiddleware.Code": {
            "type": "string",
            "enum": [
                "IE-0001",
                "IE-0002",
                "IE-0003",
                "IE-0004",
                "IE-0005",
                "IE-0006",
                "IE-0007"
            ],
            "x-enum-varnames": [
                "InternalErrorCode",
                "NotFoundErrorCode",
                "BadRequestErrorCode",
                "ValidationErrorCode",
                "UnauthorizedErrorCode",
                "NotUniqueErrorCode",
                "ForbiddenErrorCode"
            ]
        },
        "errormiddleware.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "$ref": "#/definitions/errormiddleware.Code"
                },
                "dev_message": {
                    "type": "string"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "genre.Genre": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "user.DeleteUserQuery": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "user.JwtResponse": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "user.UpdateUserLoginQuery": {
            "type": "object",
            "required": [
                "newlogin"
            ],
            "properties": {
                "newlogin": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 4
                }
            }
        },
        "user.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "emailconfirmed": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "user.UserAuthQuery": {
            "type": "object",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "type": "string",
                    "example": "admin"
                },
                "password": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "user.UserRegisterQuery": {
            "type": "object",
            "required": [
                "email",
                "login",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "login": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 4,
                    "example": "user"
                },
                "password": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 8,
                    "example": "User!1password"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}