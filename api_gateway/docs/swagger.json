{
    "consumes": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "title": "API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:9000",
    "basePath": "/api/v1/",
    "paths": {
        "/users/login": {
            "post": {
                "description": "Finds user by login and password\nReturns a token and refresh token. Token expires in 1 hour, refresh token expires in 7 days and stores in cache (removing after system restart)\nLogin field can be provided with user login or email",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Authenticates user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UserAuthQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/jwt.JwtResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "501": {
                        "description": "Not Implemented",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    }
                }
            }
        },
        "/users/refresh": {
            "post": {
                "description": "Generate new token by provided refresh token\nRefresh token stored in cache and expires in 7 days. If system was restarted, all tokens are cleared and sessions are deleted",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Generate new token",
                "parameters": [
                    {
                        "description": "Request query with user's refresh token",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/jwt.RefreshTokenQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/jwt.JwtResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "501": {
                        "description": "Not Implemented",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "description": "Creates a new instance of user and returns authorization principals",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UserRegisterQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/jwt.JwtResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    },
                    "501": {
                        "description": "Not Implemented",
                        "schema": {
                            "$ref": "#/definitions/errormiddleware.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errormiddleware.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "dev_messages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "jwt.JwtResponse": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "refreshtoken": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "jwt.RefreshTokenQuery": {
            "type": "object",
            "required": [
                "refreshtoken"
            ],
            "properties": {
                "refreshtoken": {
                    "type": "string"
                }
            }
        },
        "user.UserAuthQuery": {
            "type": "object",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "type": "string",
                    "example": "admin"
                },
                "password": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "user.UserRegisterQuery": {
            "type": "object",
            "required": [
                "email",
                "login",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "login": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 4,
                    "example": "user"
                },
                "password": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 8,
                    "example": "User!1password"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}