basePath: /api/v1/
consumes:
- application/json
definitions:
  errormiddleware.Error:
    properties:
      code:
        type: string
      dev_messages:
        items:
          type: string
        type: array
      message:
        type: string
    type: object
  jwt.JwtResponse:
    properties:
      login:
        type: string
      refreshtoken:
        type: string
      roles:
        items:
          type: string
        type: array
      token:
        type: string
    type: object
  jwt.RefreshTokenQuery:
    properties:
      refreshtoken:
        type: string
    required:
    - refreshtoken
    type: object
  user.UserAuthQuery:
    properties:
      login:
        example: admin
        type: string
      password:
        example: admin
        type: string
    required:
    - login
    - password
    type: object
  user.UserRegisterQuery:
    properties:
      email:
        example: user@example.com
        type: string
      login:
        example: user
        maxLength: 16
        minLength: 4
        type: string
      password:
        example: User!1password
        maxLength: 32
        minLength: 8
        type: string
    required:
    - email
    - login
    - password
    type: object
host: localhost:9000
info:
  contact: {}
  title: API
  version: "1.0"
paths:
  /users/login:
    post:
      description: |-
        Finds user by login and password
        Returns a token and refresh token. Token expires in 1 hour, refresh token expires in 7 days and stores in cache (removing after system restart)
        Login field can be provided with user login or email
      parameters:
      - description: User credentials
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/user.UserAuthQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response. Returns user's login, roles and personal
            token and refresh token. Refresh token stores in cache
          schema:
            $ref: '#/definitions/jwt.JwtResponse'
        "404":
          description: Returns when service can't find user by provided credentials
            (user not found)
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "500":
          description: Returns when there's some internal error that needs to be fixed
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "501":
          description: Returns when provided data was not validated
          schema:
            $ref: '#/definitions/errormiddleware.Error'
      summary: Authenticates user
      tags:
      - users
  /users/refresh:
    post:
      description: |-
        Generate new token by provided refresh token
        Refresh token stored in cache and expires in 7 days. If system was restarted, all tokens are cleared and sessions are deleted
      parameters:
      - description: Request query with user's refresh token
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/jwt.RefreshTokenQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response. Returns the same data as in authorization
          schema:
            $ref: '#/definitions/jwt.JwtResponse'
        "404":
          description: Returns when service can't find user by provided credentials
            (user not found)
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "500":
          description: Returns when there's some internal error that needs to be fixed
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "501":
          description: Returns when provided data was not validated
          schema:
            $ref: '#/definitions/errormiddleware.Error'
      summary: Generate new token
      tags:
      - users
  /users/register:
    post:
      description: Creates a new instance of user and returns authorization principals
      parameters:
      - description: User credentials
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/user.UserRegisterQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Successful token response. Returns the same response as in
            authorization
          schema:
            $ref: '#/definitions/jwt.JwtResponse'
        "409":
          description: Returns when there's already exist user with provided login
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "500":
          description: Returns when there's some internal error that needs to be fixed
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "501":
          description: Returns when provided data was not validated
          schema:
            $ref: '#/definitions/errormiddleware.Error'
      summary: Register user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
