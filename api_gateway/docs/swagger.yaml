basePath: /api/v1/
consumes:
- application/json
definitions:
  author.Author:
    properties:
      id:
        type: string
      name:
        type: string
    required:
    - id
    type: object
  book.Book:
    properties:
      author:
        $ref: '#/definitions/author.Author'
      cover:
        description: Name of cover file
        type: string
      file:
        description: Name of book file
        type: string
      genres:
        items:
          $ref: '#/definitions/genre.Genre'
        type: array
      id:
        type: string
      name:
        type: string
      pages:
        type: integer
      year:
        type: integer
    type: object
  errormiddleware.Code:
    enum:
    - IE-0001
    - IE-0002
    - IE-0003
    - IE-0004
    - IE-0005
    - IE-0006
    - IE-0007
    type: string
    x-enum-varnames:
    - InternalErrorCode
    - NotFoundErrorCode
    - BadRequestErrorCode
    - ValidationErrorCode
    - UnauthorizedErrorCode
    - NotUniqueErrorCode
    - ForbiddenErrorCode
  errormiddleware.Error:
    properties:
      code:
        $ref: '#/definitions/errormiddleware.Code'
      dev_message:
        type: string
      messages:
        items:
          type: string
        type: array
    type: object
  genre.Genre:
    properties:
      id:
        type: string
      name:
        type: string
    required:
    - id
    type: object
  user.DeleteUserQuery:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  user.JwtResponse:
    properties:
      login:
        type: string
      roles:
        items:
          type: string
        type: array
    type: object
  user.UpdateUserLoginQuery:
    properties:
      newlogin:
        maxLength: 16
        minLength: 4
        type: string
    required:
    - newlogin
    type: object
  user.User:
    properties:
      email:
        type: string
      emailconfirmed:
        type: boolean
      id:
        type: string
      login:
        type: string
      roles:
        items:
          type: string
        type: array
    type: object
  user.UserAuthQuery:
    properties:
      login:
        example: admin
        type: string
      password:
        example: admin
        type: string
    required:
    - login
    - password
    type: object
  user.UserRegisterQuery:
    properties:
      email:
        example: user@example.com
        type: string
      login:
        example: user
        maxLength: 16
        minLength: 4
        type: string
      password:
        example: User!1password
        maxLength: 32
        minLength: 8
        type: string
    required:
    - email
    - login
    - password
    type: object
host: localhost:9000
info:
  contact: {}
  title: API
  version: "1.0"
paths:
  /books:
    post:
      parameters:
      - description: primitive object id to author of book
        in: formData
        name: authorid
        required: true
        type: string
      - description: Must be an image file to book cover
        format: binary
        in: formData
        name: cover
        required: true
        type: string
      - description: Must be a .pdf file to book
        format: binary
        in: formData
        name: file
        required: true
        type: string
      - collectionFormat: csv
        description: Array of genre's Id's (must be primitive object id)
        in: formData
        items:
          type: string
        name: genres
        required: true
        type: array
      - description: Book's name. Must be unique
        in: formData
        maxLength: 32
        minLength: 4
        name: name
        required: true
        type: string
      - description: Total number of pages in pdf file
        in: formData
        maximum: 5000
        name: pages
        required: true
        type: integer
      - in: formData
        maximum: 2100
        minimum: 1400
        name: year
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Successful response. Added book
          schema:
            $ref: '#/definitions/book.Book'
        "400":
          description: Return's if some fields was missing
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "401":
          description: Return's if service can't authorize user or user's rights
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "500":
          description: Returns when there's some internal error that needs to be fixed
            or smtp server is not responding
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "501":
          description: Returns if query was incorrect
          schema:
            $ref: '#/definitions/errormiddleware.Error'
      security:
      - ApiKeyAuth: []
      summary: Creates a new book
      tags:
      - books
  /users:
    get:
      description: Get user using Id or login, both params are optional, but one of
        them is necessary
      parameters:
      - description: User id
        in: query
        name: id
        type: string
      - description: User login
        in: query
        name: login
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Returns when service didn't get a parameters
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "404":
          description: Returns when service can't find user by provided credentials
            (user not found)
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "500":
          description: Returns when there's some internal error that needs to be fixed
          schema:
            $ref: '#/definitions/errormiddleware.Error'
      summary: Finds user by id or login
      tags:
      - users
  /users/auth:
    get:
      description: Authorizes user's credentials by token. This needs to check if
        user's token is valid or get current authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Successful response. Returns user's login, roles and personal
            token and refresh token. Refresh token stores in cache
          schema:
            $ref: '#/definitions/user.JwtResponse'
        "401":
          description: Returns if user not authorized
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "500":
          description: Returns when there's some internal error that needs to be fixed
          schema:
            $ref: '#/definitions/errormiddleware.Error'
      security:
      - ApiKeyAuth: []
      summary: Authorizes user
      tags:
      - users
    post:
      description: |-
        Finds user by login and password
        Sets token to cookies
        Login field can be provided with user login or email
      parameters:
      - description: User credentials
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/user.UserAuthQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response. Returns user's login and roles
          schema:
            $ref: '#/definitions/user.JwtResponse'
        "404":
          description: Returns when service can't find user by provided credentials
            (user not found)
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "500":
          description: Returns when there's some internal error that needs to be fixed
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "501":
          description: Returns when provided data was not validated
          schema:
            $ref: '#/definitions/errormiddleware.Error'
      summary: Authenticates user
      tags:
      - users
  /users/changename:
    patch:
      description: New login must be unique. Login changing are available only 1 time
        per month
      parameters:
      - description: New user login. Must be unique
        in: body
        name: NewLogin
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserLoginQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response. User's login was updated
          schema:
            $ref: '#/definitions/user.JwtResponse'
        "401":
          description: Return's if service can't authorize user
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "403":
          description: Return's if user has login changing cooldown
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "404":
          description: Return's if user is not authorized
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "409":
          description: Return's if new user's login already taken
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "500":
          description: Returns when there's some internal error that needs to be fixed
            or smtp server is not responding
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "501":
          description: Returns if query was incorrect
          schema:
            $ref: '#/definitions/errormiddleware.Error'
      security:
      - ApiKeyAuth: []
      summary: Update user's login
      tags:
      - users
  /users/delete:
    delete:
      description: Only user can delete his own account. To delete user he needs to
        confirm his password
      parameters:
      - description: User password
        in: body
        name: Password
        required: true
        schema:
          $ref: '#/definitions/user.DeleteUserQuery'
      produces:
      - application/json
      responses:
        "204":
          description: Successful response. User was deleted, need to remove his session
        "400":
          description: Return's if user typed incorrect password
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "401":
          description: Return's if service can't authorize user
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "404":
          description: Return's if user is not authorized
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "500":
          description: Returns when there's some internal error that needs to be fixed
            or smtp server is not responding
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "501":
          description: Returns if query was incorrect
          schema:
            $ref: '#/definitions/errormiddleware.Error'
      security:
      - ApiKeyAuth: []
      summary: Deletes user's account
      tags:
      - users
  /users/email:
    post:
      description: |-
        If code field is empty: send or resend confirmation message to user's email
        Message can be resended every 1 minutes
        If code field is not empty: validate code and approve email, code is expired within 10 minutes
      parameters:
      - description: Confirmation code
        in: query
        name: code
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response. Confirmation code was sent
        "204":
          description: Successful response. Email was confirmed
        "400":
          description: Return's if user's email already confirmed
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "401":
          description: Return's if service can't authorize user
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "403":
          description: Return's if email can't be resend now (cooldown still active)
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "404":
          description: Return's if service can't find user's code or code is expired
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "500":
          description: Returns when there's some internal error that needs to be fixed
            or smtp server is not responding
          schema:
            $ref: '#/definitions/errormiddleware.Error'
      security:
      - ApiKeyAuth: []
      summary: Confirm user's email
      tags:
      - users
  /users/register:
    post:
      description: Creates a new instance of user and returns authorization principals.
        Sets the token cookies
      parameters:
      - description: User credentials
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/user.UserRegisterQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Successful token response. Returns the same response as in
            authorization
          schema:
            $ref: '#/definitions/user.JwtResponse'
        "409":
          description: Returns when there's already exist user with provided login
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "500":
          description: Returns when there's some internal error that needs to be fixed
          schema:
            $ref: '#/definitions/errormiddleware.Error'
        "501":
          description: Returns when provided data was not validated
          schema:
            $ref: '#/definitions/errormiddleware.Error'
      summary: Register user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: Cookie
    name: Authorization
    type: apiKey
swagger: "2.0"
