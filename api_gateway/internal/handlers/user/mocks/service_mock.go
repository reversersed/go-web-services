// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	user "github.com/reversersed/go-web-services/tree/main/api_gateway/internal/client/user"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AuthByLoginAndPassword mocks base method.
func (m *MockUserService) AuthByLoginAndPassword(ctx context.Context, query *user.UserAuthQuery) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthByLoginAndPassword", ctx, query)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthByLoginAndPassword indicates an expected call of AuthByLoginAndPassword.
func (mr *MockUserServiceMockRecorder) AuthByLoginAndPassword(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthByLoginAndPassword", reflect.TypeOf((*MockUserService)(nil).AuthByLoginAndPassword), ctx, query)
}

// DeleteUser mocks base method.
func (m *MockUserService) DeleteUser(ctx context.Context, query *user.DeleteUserQuery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceMockRecorder) DeleteUser(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), ctx, query)
}

// FindUser mocks base method.
func (m *MockUserService) FindUser(ctx context.Context, userid, login string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", ctx, userid, login)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockUserServiceMockRecorder) FindUser(ctx, userid, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockUserService)(nil).FindUser), ctx, userid, login)
}

// RegisterUser mocks base method.
func (m *MockUserService) RegisterUser(ctx context.Context, query *user.UserRegisterQuery) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, query)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserServiceMockRecorder) RegisterUser(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserService)(nil).RegisterUser), ctx, query)
}

// UpdateUserLogin mocks base method.
func (m *MockUserService) UpdateUserLogin(ctx context.Context, query *user.UpdateUserLoginQuery) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLogin", ctx, query)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserLogin indicates an expected call of UpdateUserLogin.
func (mr *MockUserServiceMockRecorder) UpdateUserLogin(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLogin", reflect.TypeOf((*MockUserService)(nil).UpdateUserLogin), ctx, query)
}

// UserEmailConfirmation mocks base method.
func (m *MockUserService) UserEmailConfirmation(ctx context.Context, code string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserEmailConfirmation", ctx, code)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserEmailConfirmation indicates an expected call of UserEmailConfirmation.
func (mr *MockUserServiceMockRecorder) UserEmailConfirmation(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserEmailConfirmation", reflect.TypeOf((*MockUserService)(nil).UserEmailConfirmation), ctx, code)
}

// MockJwtService is a mock of JwtService interface.
type MockJwtService struct {
	ctrl     *gomock.Controller
	recorder *MockJwtServiceMockRecorder
}

// MockJwtServiceMockRecorder is the mock recorder for MockJwtService.
type MockJwtServiceMockRecorder struct {
	mock *MockJwtService
}

// NewMockJwtService creates a new mock instance.
func NewMockJwtService(ctrl *gomock.Controller) *MockJwtService {
	mock := &MockJwtService{ctrl: ctrl}
	mock.recorder = &MockJwtServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtService) EXPECT() *MockJwtServiceMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockJwtService) GenerateAccessToken(u *user.User) (*user.JwtResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", u)
	ret0, _ := ret[0].(*user.JwtResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockJwtServiceMockRecorder) GenerateAccessToken(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockJwtService)(nil).GenerateAccessToken), u)
}

// Middleware mocks base method.
func (m *MockJwtService) Middleware(h http.HandlerFunc, roles ...string) http.HandlerFunc {
	m.ctrl.T.Helper()
	varargs := []interface{}{h}
	for _, a := range roles {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Middleware", varargs...)
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// Middleware indicates an expected call of Middleware.
func (mr *MockJwtServiceMockRecorder) Middleware(h interface{}, roles ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{h}, roles...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Middleware", reflect.TypeOf((*MockJwtService)(nil).Middleware), varargs...)
}
