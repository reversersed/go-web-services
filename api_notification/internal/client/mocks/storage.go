// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/reversersed/go-web-services/tree/main/api_notification/internal/client"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// ChangeUserLogin mocks base method.
func (m *MockStorage) ChangeUserLogin(ctx context.Context, user_id, newLogin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserLogin", ctx, user_id, newLogin)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserLogin indicates an expected call of ChangeUserLogin.
func (mr *MockStorageMockRecorder) ChangeUserLogin(ctx, user_id, newLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserLogin", reflect.TypeOf((*MockStorage)(nil).ChangeUserLogin), ctx, user_id, newLogin)
}

// CreateUser mocks base method.
func (m *MockStorage) CreateUser(ctx context.Context, user_id, login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user_id, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStorageMockRecorder) CreateUser(ctx, user_id, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorage)(nil).CreateUser), ctx, user_id, login)
}

// DeleteUser mocks base method.
func (m *MockStorage) DeleteUser(ctx context.Context, user_id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, user_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStorageMockRecorder) DeleteUser(ctx, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStorage)(nil).DeleteUser), ctx, user_id)
}

// IsUserExists mocks base method.
func (m *MockStorage) IsUserExists(ctx context.Context, user_id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExists", ctx, user_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserExists indicates an expected call of IsUserExists.
func (mr *MockStorageMockRecorder) IsUserExists(ctx, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExists", reflect.TypeOf((*MockStorage)(nil).IsUserExists), ctx, user_id)
}

// SendNotification mocks base method.
func (m *MockStorage) SendNotification(ctx context.Context, notif *client.Notification, user_id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", ctx, notif, user_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockStorageMockRecorder) SendNotification(ctx, notif, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockStorage)(nil).SendNotification), ctx, notif, user_id)
}
