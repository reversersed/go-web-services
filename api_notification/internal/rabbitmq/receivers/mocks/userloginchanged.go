// Code generated by MockGen. DO NOT EDIT.
// Source: userloginchanged.go

// Package mock_receivers is a generated GoMock package.
package mock_receivers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/reversersed/go-web-services/tree/main/api_notification/internal/client"
)

// Mockuser_login_changed_service is a mock of user_login_changed_service interface.
type Mockuser_login_changed_service struct {
	ctrl     *gomock.Controller
	recorder *Mockuser_login_changed_serviceMockRecorder
}

// Mockuser_login_changed_serviceMockRecorder is the mock recorder for Mockuser_login_changed_service.
type Mockuser_login_changed_serviceMockRecorder struct {
	mock *Mockuser_login_changed_service
}

// NewMockuser_login_changed_service creates a new mock instance.
func NewMockuser_login_changed_service(ctrl *gomock.Controller) *Mockuser_login_changed_service {
	mock := &Mockuser_login_changed_service{ctrl: ctrl}
	mock.recorder = &Mockuser_login_changed_serviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockuser_login_changed_service) EXPECT() *Mockuser_login_changed_serviceMockRecorder {
	return m.recorder
}

// OnUserLoginChanged mocks base method.
func (m *Mockuser_login_changed_service) OnUserLoginChanged(ctx context.Context, query *client.UserLoginChangedMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnUserLoginChanged", ctx, query)
}

// OnUserLoginChanged indicates an expected call of OnUserLoginChanged.
func (mr *Mockuser_login_changed_serviceMockRecorder) OnUserLoginChanged(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnUserLoginChanged", reflect.TypeOf((*Mockuser_login_changed_service)(nil).OnUserLoginChanged), ctx, query)
}
