services:
  mongo:
    image: mongo
    restart: always
    volumes:
      - ./data/mongodb:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: d9aeb352a9c668e8793b2412e895dc72a9260ae4d0e00e0cf624a209f3fff983
    ports:
      - 27017:27017
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 100s
      retries: 10

  rabbitmq:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitUser
      - RABBITMQ_DEFAULT_PASS=rabbitPassword
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq/cookie
    logging:
      options:
        max-size: 256m
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 3s
      timeout: 60s
      retries: 20

  api_gateway:
    image: api_gateway
    volumes:
      - ./api_gateway/logs:/logs
      - ./api_gateway/config:/config
    user: root
    build:
      context: ./api_gateway
      dockerfile: ./Dockerfile
    ports:
      - 9000:9000
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  api_user:
    image: api_user
    volumes:
      - ./api_user/logs:/logs
      - ./api_user/config:/config
      - ./api_user/internal/email/templates:/templates
    user: root
    build:
      context: ./api_user
      dockerfile: ./Dockerfile
    depends_on:
      - api_gateway

  api_notification:
    image: api_notification
    volumes:
      - ./api_notification/logs:/logs
      - ./api_notification/config:/config
    user: root
    build:
      context: ./api_notification
      dockerfile: ./Dockerfile
    depends_on:
      - api_gateway

  api_books:
    image: api_books
    volumes:
      - ./api_books/logs:/logs
      - ./api_books/config:/config
      - ./data/files:/files
    user: root
    build:
      context: ./api_books
      dockerfile: ./Dockerfile
    depends_on:
      - api_gateway

  api_authors:
    image: api_authors
    volumes:
      - ./api_authors/logs:/logs
      - ./api_authors/config:/config
    user: root
    build:
      context: ./api_authors
      dockerfile: ./Dockerfile
    depends_on:
      - api_gateway

  api_genres:
    image: api_genres
    volumes:
      - ./api_genres/logs:/logs
      - ./api_genres/config:/config
    user: root
    build:
      context: ./api_genres
      dockerfile: ./Dockerfile
    depends_on:
      - api_gateway
